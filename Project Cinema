-- Connect to the Database
USE Database;

DROP TABLE IF EXISTS Customers; --7
-- Create table Customers --1
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    firstname VARCHAR(50) NOT NULL,
    lastname VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(15)
);

-- Insert into the Customers table
INSERT INTO Customers (customer_id, firstname, lastname, email, phone_number) VALUES
    (1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890'),
    (2, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210'),
    (3, 'Alice', 'Johnson', 'alice.johnson@example.com', '555-123-4567'),
    (4, 'Bob', 'Williams', 'bob.williams@example.com', '222-333-4444'),
    (5, 'Emily', 'Davis', 'emily.davis@example.com', '777-888-9999'),
    (6, 'Raul', 'Soproni', 'raul.soproni@example.com', '777-767-9999');


-- Select all records from the Customers table
SELECT * FROM Customers;

-- Select all information about the customer which has first name 'Raul'
SELECT * FROM Customers WHERE firstname = 'Raul';


DROP TABLE IF EXISTS movies;  --6
-- Create table Movies --2
CREATE TABLE movies (
    id INT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    genre VARCHAR(100),
    release_date DATE,
    runtime_minutes INT,
    rating DECIMAL(3,1)
);


-- Insert into the movies table
INSERT INTO movies (id, title, genre, release_date, runtime_minutes, rating) VALUES
    (1, 'Oppenheimer', 'Drama', '2023-07-21', 180, 8.4),
    (2, 'Mission: Impossible - Dead Reckoning Part One', 'Action', '2023-07-14', 163, 7.8),
    (3, 'The Creator', 'Action', '2023-09-29', 133, 6.9),
    (4, 'Interstellar', 'Sci-Fi', '2014-11-07', 169, 8.7),
    (5, 'Avatar: The Way of Water', 'Fantasy', '2022-12-16', 192, 7.6),
    (6, 'Avengers: Endgame', 'Action', '2019-04-25', 181, 8.4),
    (7, 'Gran Turismo', 'Action', '2023-08-25', 134, 7.2),
    (8, 'Top Gun: Maverick', 'Action', '2022-05-27', 130, 8.3),
    (9, 'Inception', 'Action', '2010-07-16', 148, 8.8),
    (10, 'Ted', 'Comedy', '2012-09-21', 106, 6.9),
    (11, 'The Hangover', 'Comedy', '2009-07-10', 100, 7.7),
    (12, 'The Hunger Games: The Ballad of Songbirds & Snakes', 'Action', '2023-11-17', 157, 7.1);

-- Retrieve all movies:
SELECT * FROM movies;

-- Retrieve movie title where id = 8
SELECT title FROM movies WHERE id = 8;

-- Retrieve specific columns for all movies:
SELECT title, genre, release_date, runtime_minutes, rating FROM movies;

-- Retrieve movies released after a specific year:
SELECT * FROM movies WHERE release_date > '2017-01-01';

-- Retrieve movies of a specific genre:
SELECT * FROM movies WHERE genre = 'Action';

-- Retrieve movies with a rating above a certain value:
SELECT * FROM movies WHERE rating > 7.8;


DROP TABLE IF EXISTS Movies_Session;  --5
-- Create table Movies_Session --3
CREATE TABLE Movies_Session (
    session_id INT PRIMARY KEY,
    starttime DATETIME NOT NULL,
    title VARCHAR(100) NOT NULL,
    endtime DATETIME,
    movie_id INT, -- Adaugă coloana movie_id în tabela Movies_Session
    CONSTRAINT fk_movie_id FOREIGN KEY (movie_id) REFERENCES movies(id)
);


-- Insert movie sessions into the Movies_Session table
INSERT INTO Movies_Session (session_id, title, starttime, endtime) VALUES 
(1, 'Oppenheimer', '2024-04-01 15:00:00', '2024-04-01 18:00:00'),
(2, 'Mission: Impossible - Dead Reckoning Part One', '2024-04-01 16:00:00', '2024-04-01 18:00:00'),
(3, 'The Creator', '2024-04-01 18:00:00', '2024-04-01 19:50:00'),
(4, 'Interstellar', '2024-04-01 20:00:00', '2024-04-01 22:00:00'),
(5, 'Avatar', '2024-04-01 20:30:00', '2024-04-01 23:30:00');

--Retrieve info about movies_session
SELECT session_id, title, starttime, endtime FROM Movies_Session;


DROP TABLE IF EXISTS Auditorium;  --4
--Create table Auditorium --4
CREATE TABLE Auditorium (
    auditorium_id INT PRIMARY KEY,
    auditorium_name VARCHAR(255),
    capacity INT,
    location VARCHAR(255),
    description TEXT
);

-- Insert 3 movie theaters
INSERT INTO auditorium (auditorium_id, auditorium_name, capacity, location, description) VALUES
(1, 'Sala 1', 100, 'Cluj-Napoca', 'Sala medie cu ecran standard.'),
(2, 'Sala 2', 180, 'Cluj-Napoca', 'Sala mare cu ecran panoramic.'),
(3, 'Sala 3', 240, 'Cluj-Napoca', 'Sala mare cu ecran IMAX.');

--Retrieve all from Auditorium
SELECT * FROM Auditorium
WHERE capacity >= 101;


DROP TABLE IF EXISTS Seats;  --3
-- Create table Seats  --5
CREATE TABLE Seats (
    seat_id INT PRIMARY KEY IDENTITY,
    movie_id INT,
    seat_number VARCHAR(10),
    auditorium_auditorium_id INT, -- Am corectat numele coloanei auditorium_id conform specificațiilor tale
    FOREIGN KEY (movie_id) REFERENCES movies(id),
    FOREIGN KEY (auditorium_auditorium_id) REFERENCES Auditorium(auditorium_id) -- Am adăugat o constrângere de cheie străină pentru auditorium_id
);


-- Insertion of 20 seats for the movies with id 1 and 2
INSERT INTO Seats (movie_id, seat_number)
VALUES 
    (1, 'A1'), (1, 'A2'), (1, 'A3'), (1, 'A4'), (1, 'A5'),
    (1, 'B1'), (1, 'B2'), (1, 'B3'), (1, 'B4'), (1, 'B5'),
    (1, 'C1'), (1, 'C2'), (1, 'C3'), (1, 'C4'), (1, 'C5'),
    (1, 'D1'), (1, 'D2'), (1, 'D3'), (1, 'D4'), (1, 'D5'),
    (2, 'A1'), (2, 'A2'), (2, 'A3'), (2, 'A4'), (2, 'A5'),
    (2, 'B1'), (2, 'B2'), (2, 'B3'), (2, 'B4'), (2, 'B5'),
    (2, 'C1'), (2, 'C2'), (2, 'C3'), (2, 'C4'), (2, 'C5'),
    (2, 'D1'), (2, 'D2'), (2, 'D3'), (2, 'D4'), (2, 'D5');


-- Show the number of the seats for movie with id 1
SELECT COUNT(*) AS numar_scaune
FROM Seats
WHERE movie_id = 1;


DROP TABLE IF EXISTS Reservations;  --2
-- Create table Reservations --6
CREATE TABLE Reservations (
    reservation_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    movie_id INT NOT NULL,
    auditorium_name VARCHAR(255),
    reservation_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'Pending' CHECK (status IN ('Pending', 'Confirmed', 'Cancelled')),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (movie_id) REFERENCES movies(id)
);

-- Insert multiple reservation information
INSERT INTO Reservations (reservation_id, customer_id, movie_id, auditorium_name, reservation_date, status)
VALUES
(1, 1, 1, 'Sala 1', '2024-04-01 15:00:00', 'Confirmed'),
(2, 2, 1, 'Sala 1', '2024-04-01 15:00:00', 'Confirmed'),
(3, 3, 1, 'Sala 1', '2024-04-01 15:00:00', 'Confirmed'),
(4, 1, 2, 'Sala 2', '2024-04-01 18:30:00', 'Confirmed'),
(5, 2, 2, 'Sala 2', '2024-04-01 18:30:00', 'Confirmed'),
(6, 3, 2, 'Sala 2', '2024-04-01 18:30:00', 'Confirmed'),
(7, 1, 3, 'Sala 3', '2024-04-01 20:30:00', 'Confirmed'),
(8, 2, 3, 'Sala 3', '2024-04-01 20:30:00', 'Confirmed'),
(9, 3, 3, 'Sala 3', '2024-04-01 20:30:00', 'Cancelled');


-- Show reserved seats for each reservation
SELECT 
    r.reservation_id,
    r.customer_id,
    r.movie_id,
    r.auditorium_name,
    s.seat_number,
    r.reservation_date
FROM 
    Reservations r
JOIN
    Seats s ON r.movie_id = s.movie_id
WHERE
    r.status = 'Confirmed';



DROP TABLE IF EXISTS Payments;  --1
-- Create table Payments  --7
CREATE TABLE Payments (
    payment_id INT PRIMARY KEY,
    reservation_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50),
    FOREIGN KEY (reservation_id) REFERENCES Reservations(reservation_id)
);

-- Insert data into the Payments table
INSERT INTO Payments (payment_id, reservation_id, amount, payment_date, payment_method) VALUES
    (1, 1, 50.00, '2024-04-01 14:30:00', 'Credit Card'),
    (2, 2, 50.00, '2024-04-01 14:45:00', 'Credit Card'),
    (3, 3, 50.00, '2024-04-01 15:00:00', 'Credit Card'),
    (4, 4, 50.00, '2024-04-01 14:30:00', 'Credit Card'),
    (5, 5, 50.00, '2024-04-01 14:45:00', 'Credit Card'),
    (6, 6, 50.00, '2024-04-01 15:00:00', 'Cash'),
    (7, 7, 50.00, '2024-04-01 15:00:00', 'Cash'),
    (8, 8, 50.00, '2024-04-01 15:00:00', 'Cash');

-- Number of payments
SELECT payment_method, COUNT(*) AS total_payments
FROM Payments
GROUP BY payment_method;

-- Payment Method
SELECT 
    r.reservation_id,
    r.customer_id,
    r.movie_id,
    r.auditorium_name,
    r.reservation_date,
    p.payment_method
FROM 
    Reservations r
LEFT JOIN 
    Payments p ON r.reservation_id = p.reservation_id;












